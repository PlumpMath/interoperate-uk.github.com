<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Interoperate]]></title>
  <link href="http://www.interoperate.co.uk/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.interoperate.co.uk/"/>
  <updated>2012-02-29T14:51:23+00:00</updated>
  <id>http://www.interoperate.co.uk/</id>
  <author>
    <name><![CDATA[Jon Wade]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sinatra on Rails]]></title>
    <link href="http://www.interoperate.co.uk/blog/2012/02/20/sinatra-on-rails/"/>
    <updated>2012-02-20T21:16:00+00:00</updated>
    <id>http://www.interoperate.co.uk/blog/2012/02/20/sinatra-on-rails</id>
    <content type="html"><![CDATA[<p>I'm always interested in approaches to modular and minimalist coding.  I've read a few articles about using <a href="http://www.sinatrarb.com/">Sinatra</a> as a DSL for writing 'micro apps' and can see that it could be useful for writing lightweight applications and APIs and reusing code.  I was also interested from a re-use perspective in how a <a href="http://www.sinatrarb.com/">Sinatra</a> 'micro app' could be embedded in a 'parent' Rails application.  Turns out it's pretty clean and straightforward.</p>

<!-- More -->


<h2>Creating a Basic Sinatra Application</h2>

<p>First install the Sinatra gem.</p>

<pre><code>gem install sinatra
gem install thin
gem install haml 
</code></pre>

<p>I've included a few optional extras here. By default, <a href="http://www.sinatrarb.com/">Sinatra</a> will use WEBrick for the application server but <a href="http://code.macournoyer.com/thin/">Thin</a> will be used if it is installed.  Also, I much prefer using <a href="http://haml-lang.com/">HAML</a> (Yippeee!) markup over <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/erb/rdoc/ERB.html">ERB</a> (Ugh, yuk *!&amp;%<sup>+!)</sup> for my view templates.  For my first trivial application I'm going to show a welcome message and tell the client their IP address (obtained from the 'request' parameter).
``` ruby myapp.rb
require 'sinatra'
require 'haml'</p>

<p>get '/' do
  @client_ip = request.ip
  haml :index, :format => :html5
end</p>

<p><strong>END</strong></p>

<p>@@layout
!!!
%html
  %head</p>

<pre><code>%title
</code></pre>

<p>  %body</p>

<pre><code>= yield
</code></pre>

<p>@@index
%h1 Hello From Sinatra
%p= "Your IP address is: #{@client_ip}"
<code>``
That's it!  Note that this is the 'inline' flavour of a Sinatra application.  The view templates are embedded at the end of the ruby source file after the</code><strong>END</strong><code>keyword.  The view concept should be familiar to anyone used to Rails.  [Sinatra](http://www.sinatrarb.com/) expects a layout called 'layout' and will use that to embed views using the 'yield' keyword.  Routing is declared in the</code>get '/' do<code>code block.  Equally you could use 'post', 'put' etc. depending on the preferred HTTP verb and the path.  This application will print a simple message to the screen and notify the user of their client IP address.  To fire up the application, I just type</code>ruby my_app.rb` as follows:</p>

<pre><code>$ ruby my_app.rb
== Sinatra/1.3.2 has taken the stage on 4567 for development with backup from Thin
&gt;&gt; Thin web server (v1.3.1 codename Triple Espresso)
&gt;&gt; Maximum connections set to 1024
&gt;&gt; Listening on 0.0.0.0:4567, CTRL+C to stop**
</code></pre>

<p>Pointing my browser at http://localhost:4567 now shows:</p>

<p><img src="/images/sinatra.png" title="Sinatra" alt="Sinatra"></p>

<h2>Refactoring</h2>

<p>OK, so it's not setting the world alight but it's quite cool having a web application in a single file with only 21 lines including routing and view templates.  The single file approach is good for minimalist applications but I prefer to have my code organised so I'm going to do some refactoring.  I'm going to move the layout and index templates into their own files in a separate folder.  By default, <a href="http://www.sinatrarb.com/">Sinatra</a> expects views to live in <code>./views</code> so I'm going to stick with that.  You can override the views folder using the <code>set :views, '/path/to/my/views/folder'</code> declaration.</p>

<p>So, my <code>my_app.rb</code> script now looks like this:</p>

<p>``` ruby my_app.rb
require 'sinatra'
require 'haml'</p>

<p>get '/' do
  @client_ip = request.ip
  haml :index, :format => :html5
end
```</p>

<p>and my folder structure looks like this:</p>

<pre><code>.
├── my_app.rb
└── views
    ├── index.haml
    └── layout.haml
</code></pre>

<p>``` haml layout.haml
!!!
%html
  %head</p>

<pre><code>%title
</code></pre>

<p>  %body</p>

<pre><code>= yield
</code></pre>

<p><code>
</code> haml index.haml
%h1 Hello From Sinatra
%p= "Your IP address is:#{@client_ip}"
```</p>

<h2>Mounting a Sinatra App in a Rails Application</h2>

<p>So, now I've got my nice little <a href="http://www.sinatrarb.com/">Sinatra</a> application that will inform users of their client IP address.  I think that this would be a useful application to reuse in a full blown rails application so how do I go about mounting it from Rails?</p>

<h3>Wrapping it up as a Gem</h3>

<p>Firstly, I want to package it up neatly as a Ruby Gem.  This is fairly straightforward.  All I need to do is put my code in a folder called <code>lib</code>, create a <code>my_app.gemspec</code> file and then drop the <code>my_app.gemspec</code> file and the <code>lib</code> directory into a directory called <code>my_app</code>.  My gemspec file looks like this:
``` ruby my_app.gemspec
Gem::Specification.new do |s|
  s.name = %q{my_app}
  s.version = "1.0.0"
  s.date = %q{2012-02-20}
  s.summary = %q{blah blah blah}
  s.files = [</p>

<pre><code>"lib/my_app.rb"
</code></pre>

<p>  ]
  s.require_paths = ["lib"]
end
```
The folder structure of my 'my_app' gem looks like this:</p>

<pre><code>./my_app
├── lib
│   ├── my_app.rb
│   └── views
│       ├── index.haml
│       └── layout.haml
└── my_app.gemspec
</code></pre>

<p>We need to make one change to the <code>my_app.rb</code> file to allow Rails to recognise it as a class inheriting from Sinatra::Base.  So I wrap the code in a class declaration as follows:</p>

<p>``` ruby my_app.rb
class MyApp &lt; Sinatra::Base</p>

<p>  require 'sinatra'
  require 'haml'</p>

<p>  get '/' do</p>

<pre><code>@client_ip = request.ip
haml :index, :format =&gt; :html5
</code></pre>

<p>  end</p>

<p>end
```</p>

<h3>Mounting the Sinatra Application from Rails</h3>

<p>I'm going to mount my gem locally under the lib directory of my Rails application. So I drop the <code>my_app</code> folder into the lib directory of my Rails application  I now need to modify the Gemfile of my Rails application to load the <a href="http://www.sinatrarb.com/">Sinatra</a> gem, as well as my new <code>my_app</code> gem and also any other gems required by the app so I add the following lines:</p>

<p><code>ruby Gemfile
gem 'sinatra'
gem 'haml'
gem 'my_app', :path =&gt; 'lib/my_app'
</code>
After editing the <code>Gemfile</code> you then need to run <code>bundle update</code> to install the new gems.</p>

<p>Finally, I need to add a route to <code>routes.rb</code> to mount <code>MyApp</code> under the <code>clientip</code> path so that users browsing to <code>http://localhost:3000/clientip</code> will see the information served up by the Sinatra application.  This is accomplished by adding the following line:
<code>ruby routes.rb
mount MyApp =&gt; "/clientip"
</code></p>

<p>Now, when I fire up my Rails application and browse to <code>http:.//localhost:3000/clientip</code>, I get a response from the Sinatra application:</p>

<p><img src="/images/sinatra2.png" title="Sinatra" alt="Sinatra"></p>

<h2>Conclusion</h2>

<p><a href="http://www.sinatrarb.com/">Sinatra</a> takes a blank canvas approach i.e. you start with nothing and you add what you need.  Conversely, when you create a new Rails application, you get a hell of a lot out of the box and as long as you stick with the Rails conventions, you can save yourself a lot of custom coding.  I like the minimalist aspect of <a href="http://www.sinatrarb.com/">Sinatra</a> and its simplicity but feel that I would soon find myself missing some of the built-in functionality of Rails.  I'm pretty sure it would be possible to develop some very elegant web applications with very few lines of code.  I don't see it as an alternative to Rails but rather as complimentary for discrete functional modules.  It would certainly be very useful for knocking up quick prototype APIs or proof of solution activities.</p>

<p>For some examples of Sinatra in the wild, visit <a href="http://www.sinatrarb.com/wild.html">http://www.sinatrarb.com/wild.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using OpenLayers with Rails]]></title>
    <link href="http://www.interoperate.co.uk/blog/2012/02/07/using-openlayers-with-rails/"/>
    <updated>2012-02-07T09:20:00+00:00</updated>
    <id>http://www.interoperate.co.uk/blog/2012/02/07/using-openlayers-with-rails</id>
    <content type="html"><![CDATA[<p>Over the last few years, I've worked on a few projects that have required the need to display information on a map.  Typically a polyline (or linestring) depicting a journey made by car.  I have previously used Google Maps and interacted directly with the Google Maps API.  However I don't like being tied into a single mapping provider and wanted the ability to easily switch between providers if required.  <a href="http://openlayers.org">OpenLayers</a> allows you to do this.  I'm using Rails and wanted an easy way of storing geodata in a database and have it displayed on a map by <a href="http://openlayers.org">OpenLayers</a>.  Here's what I ended up with.</p>

<!-- More -->


<h2>Serving up the geodata in Rails</h2>

<p>I'm using PostgreSQL for my main Rails database but I'm also using file based SQLite databases to store datasets of GPS data.  For simplicity, I have a single table called 'gps' with fields called 'datetime,lat,lon,speed'.  My data is generally broken down into 'trips' so I have separate files for each trip.</p>

<p>```
sqlite> .schema
CREATE TABLE gps (datetime TEXT,lat REAL,lon REAL,speed REAL);</p>

<p>sqlite> SELECT * FROM gps LIMIT 5;
2012-02-03 11:15:07.000|53.858473|-1.42572|0.138
2012-02-03 11:15:08.000|53.858473|-1.42572|1.3
2012-02-03 11:15:09.000|53.858477|-1.425728|3.234
2012-02-03 11:15:10.000|53.858487|-1.42575|6.318
2012-02-03 11:15:11.000|53.858505|-1.425785|9.045
```</p>

<p>So, I want this data to be served up by Rails to <a href="http://openlayers.org">OpenLayers</a> in a format that it can understand.  I decided that the easiest way to do this was to use the <a href="http://geojson.org">GeoJSON</a> format as I could just create a 'trip' as a Ruby Hash object and then use Rails format to serve it up as a JSON object. So in my Trip model I defined a 'geojson' method that will return a Hash with the same structure as a <a href="http://geojson.org">GeoJSON</a> 'FeatureCollection' object:</p>

<p>``` ruby trip.rb
class Trip &lt; ActiveRecord::Base</p>

<p>  def geojson</p>

<pre><code>filename = File.join(Rails.root,'mydata.db')
db = SQLite3::Database.new(filename)
sql = "SELECT datetime,lon,lat FROM gps ORDER BY datetime ASC;"

coordinates = []
db.execute(sql) do |row|
  coordinates &lt;&lt; [ row[1],row[2] ]
end

# return a GeoJSON 'FeatureCollection' 
{ :type =&gt; "FeatureCollection",
  :features =&gt; [
    :geometry =&gt; {
      :type =&gt; "GeometryCollection",
      :geometries =&gt; [
        { :type =&gt; "LineString", :coordinates =&gt; coordinates }
      ]
    }
  ]
} 
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>In my controller, I can then just serve up the @trip.geojson Hash as JSON using Rails's built in json renderer</p>

<p>``` ruby trips_controller.rb
class TripsController &lt; ApplicationController</p>

<p>  def show</p>

<pre><code>@trip = Trip.find(params[:id])
respond_to do |format|
  #format.html # show.html.erb
  format.json { render json: @trip.geojson }
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Pointing my browser at http://localhost:3000/trips/1.json will now serve up the JSON file as follows:</p>

<p>``` javascript http://localhost:3000/trips/1.json
{
  type: "FeatureCollection",
  features: [</p>

<pre><code>{
  type: "Feature",
  geometry: {
    type: "GeometryCollection",
    geometries: [
      {
        type: "LineString",
        coordinates: [
          [ -1.425713, 53.858375 ],
          [ -1.425713, 53.858375 ],
          [ -1.425713, 53.858373 ],
          [ -1.425712, 53.858373 ],
          [ -1.425712, 53.858372 ],
          [ ..more.. ]
        ]
      }
    ]
  }
}
</code></pre>

<p>  ]
}
```</p>

<h2>Generating the Map</h2>

<p>The next thing that I needed to do was to get a basic map up and running with OpenLayers.  There were also some other features that I wanted:</p>

<ol>
<li>To be able to switch between various base layers via a controller on the map:

<ul>
<li>OpenStreetMaps</li>
<li>Google Maps (Roads)</li>
<li>Google Maps (Terrain)</li>
</ul>
</li>
<li>To be able to style the linestring.</li>
<li>To be able to automatically centre the map on the center of the linestring and zoom to a sensible level when the page is loaded.</li>
</ol>


<p>It took me a few hours digging through the OpenLayers API spec and Google to find all the answers but in the end I ended up with this.  The hardest parts were understanding the different projections and working out how the features are returned by the OpenLayers.Format.GeoJSON.read function so that they can be iterated over to set the bounds.</p>

<p>``` javascript openlayers.js
var map;</p>

<p>function initializeMap() {
  // This function is called by the body onload() event in the view</p>

<p>  // Define a new map.  We want it to be loaded into the 'map_canvas' div in the view
  map = new OpenLayers.Map('map_canvas');</p>

<p>  // Add a LayerSwitcher controller
  map.addControl(new OpenLayers.Control.LayerSwitcher());</p>

<p>  // OpenStreetMaps
  var osm = new OpenLayers.Layer.OSM();</p>

<p>  // Google Maps (ROAD)
  var gmap = new OpenLayers.Layer.Google(</p>

<pre><code>"Google Maps",
{ type: google.maps.MapTypeId.ROAD }
</code></pre>

<p>   );</p>

<p>  // Google Maps (SATELLITE)
  var gsat = new OpenLayers.Layer.Google(</p>

<pre><code>"Google Satellite",
{ type: google.maps.MapTypeId.SATELLITE }
</code></pre>

<p>  );</p>

<p>  // Add the layers defined above to the map<br/>
  map.addLayers([osm, gmap, gsat]);</p>

<p>  // Set some styles
  var myStyleMap = new OpenLayers.StyleMap({</p>

<pre><code>'strokeColor': 'magenta',
'strokeOpacity': 1.0,
'strokeWidth': 2
</code></pre>

<p>  });</p>

<p>  // Create a new vector layer including the above StyleMap
  var vectorLayer = new OpenLayers.Layer.Vector(</p>

<pre><code>"Trip",
{ styleMap: myStyleMap }
</code></pre>

<p>  );   <br/>
  map.addLayer(vectorLlayer);</p>

<p>  // Get the polylines from Rails
  var url = "/trips/1.json"
  OpenLayers.loadURL(url, {}, null, function (response){</p>

<pre><code>var geojson_format = new OpenLayers.Format.GeoJSON({
  'internalProjection': new OpenLayers.Projection("EPSG:900913"),
  'externalProjection': new OpenLayers.Projection("EPSG:4326")
});

//Read the GeoJSON
var features = geojson_format.read(response.responseText,"FeatureCollection");

var bounds;

if(features) {
  if(features.constructor != Array) {
    features = [features];
  }

  // Iterate over the features and extend the bounds to the bounds of the geometries
  for(var i=0; i&lt;features.length; ++i) {
    if (!bounds) {
      bounds = features[i].geometry.getBounds();
    } else {
      bounds.extend(features[i].geometry.getBounds());
    }
  }

  // Add features to the 'vectorLayer'
  vectorLayer.addFeatures(features);

  // Set the extent of the map to the 'bounds'
  map.zoomToExtent(bounds);
}  
</code></pre>

<p>  });
}
```</p>

<p>I've included screenshots below.  Note how the map has been centered on the geometry of the linestring and a sensible zoom level has been set.  You can find a live demo on my <a href="http://sandbox.interoperate.co.uk/openlayers">Sandbox</a> site.</p>

<p><img src="/images/openstreetmap.jpg" title="OpenStreetMap" alt="OpenStreetMap">
<img src="/images/google_roads.jpg" title="Google Maps (ROAD)" alt="Google Maps Road">
<img src="/images/google_satellite.jpg" title="Google Maps (Satellite)" alt="Google Maps Satellite"></p>
]]></content>
  </entry>
  
</feed>
