<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | Interoperate]]></title>
  <link href="http://www.interoperate.co.uk/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://www.interoperate.co.uk/"/>
  <updated>2012-03-17T13:23:06+00:00</updated>
  <id>http://www.interoperate.co.uk/</id>
  <author>
    <name><![CDATA[Jon Wade]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Roman Numeral Method]]></title>
    <link href="http://www.interoperate.co.uk/blog/2012/01/15/ruby-roman-numeral-method/"/>
    <updated>2012-01-15T18:48:00+00:00</updated>
    <id>http://www.interoperate.co.uk/blog/2012/01/15/ruby-roman-numeral-method</id>
    <content type="html"><![CDATA[<p>Just gone live with this blog and I must say that I'm pretty impressed with <a href="http://octopress.org/">Octopress</a>.  It only took me a few minutes to get it setup and hosted on <a href="http://www.github.com/">GitHub</a> thanks to the excellent documentation.  For my first post I thought I'd check out the syntax highlighting with a simple Ruby function to extend the core Fixnum class to allow an integer to be converted to Roman numerals.  This syntax highlighting is using the <a href="http://ethanschoonover.com/solarized">Solarized</a> colour palette which has been meticulously designed to allow optimum crispness and legibility on both light and dark backgrounds.  I also use the same colour palette when using <a href="http://www.iterm2.com/#/section/home">Iterm2</a> and <a href="http://www.vim.org/">Vim</a>.</p>

<!-- more -->


<p>``` ruby Convert to Roman Numerals</p>

<h1>Add a 'to_roman' method to the core Fixnum class</h1>

<p>Fixnum.class_eval do</p>

<p>  def to_roman</p>

<pre><code>year = self
s = String.new
d = {
  1000 =&gt; "M",
   900 =&gt; "CM",
   500 =&gt; "D",
   400 =&gt; "CD",
   100 =&gt; "C",
    90 =&gt; "XC",
    50 =&gt; "L",
    40 =&gt; "XL",
    10 =&gt; "X",
     9 =&gt; "IX",
     5 =&gt; "V",
     4 =&gt; "IV",
     1 =&gt; "I"
}
d.keys.sort.reverse_each do |k|
  w,r = year.divmod(k)
  s = s + d[k] * w
  year = r
end

s
</code></pre>

<p>  end</p>

<p>end</p>

<h1>Example Usage</h1>

<p>puts 2012.to_roman => "MMXII"
```</p>
]]></content>
  </entry>
  
</feed>
